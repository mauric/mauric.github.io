---
layout: post
title: "C++ Secrets"
date: 2025-10-09 12:00:00 +0000
categories: [C++, Programming, Tutorials]
tags: [c++, tips, modern-cpp, performance]
author: "Mauric"
description: "Draft: collection of C++ tips, idioms and best practices."
image: /assets/images/cpp-secrets-placeholder.png
draft: true
permalink: /drafts/cpp-secrets/
---

Summary
-------
A short overview of what this draft will cover. Replace this paragraph with a one-line summary of the article.

Motivation
----------
Why this article exists and who it is for. Explain the problem space and expected reader level (beginner, intermediate, advanced).

Table of contents
-----------------
- Introduction
- Key ideas
- Examples
- Pitfalls and notes
- References
- TODO

Introduction
------------
Introduce the main themes, e.g., modern C++ idioms, performance tweaks, safer APIs, and common pitfalls.

Key ideas
---------
- Prefer RAII and smart pointers over manual resource management.
- Use constexpr and const when possible.
- Prefer algorithms and range-based loops over manual index loops.
- Embrace move semantics and perfect forwarding where appropriate.
- Keep interfaces small and clearly documented.
- El origen viene del RAII (Resource Acquisition Is Initialization), principio sagrado del C++:

The resources should live and die with the object that owns them. When the language did not have move semantics
thats before C++11, the original rule was the "Rule of Three", that stands by:
- Destructor
- Copy constructor 
- Copy assignment
Because if on eo fthe three was necessary, the other two were also necessary. C++11 added the concept of movement of resources
which allows to transfer resources without copying. So the rule has to be extended to five:


Examples
--------
Minimal, copy-pasteable examples to illustrate key ideas.

Smart pointer example: